let circles = [];

function setup() {
  canvSize = min(windowWidth, windowHeight);
  createCanvas(canvSize, canvSize);
  colorMode(HSB, 360, 120, 100, 255);
  background(0);
  background(220,80,50);
  noStroke();
  for (i = 0; i < 5; i++) {
    //push 5 circles into array
    x = random(width);
    y = random(height);
    rad = width * random(0.1,0.2);
    circles.push(createVector(x, y, rad));
  }
  // fill(0,80,80);
  // circle(width/3,height/3,width*0.6);
  // strokeWeight(0.6);
  rez1 = 0.006; // angle
  rez2 = 0.005; // color
  gap = 7;
  len = 8;
  startVary = 25;
  startCol = random(360);
  strokeCap(SQUARE);
  // noprotect
  for (i = -20; i < width+20; i += gap) {
    for (j = -20; j < height+20; j += gap) {
      n2 = (noise (i * rez2, j* rez2)-0.2)*1.7;
      h = floor(n2*5)*72 + startCol;
      if (h>360){
        h-=360
      }
      stroke(h+ random(-8,8),80 + random(-15,15),80+random(-15,15),200);
      x = i + random(-startVary,startVary);
      y = j + random(-startVary,startVary);  
       for (k = 7; k > 0; k--) {
        g1 = createVector(0, 0);
        for (n = 0; n < circles.length; n++) {
          // get the vector for each circle at the line location and add the vectors together
          g0 = makeGradient(x, y, n, distFunction);
          g1 = p5.Vector.add(g1, g0);
        }
        g1.normalize();
        g1.mult(len); //multiply to make the line segment longer
        
        strokeWeight(k*0.5);
        //strokeWeight(random(6));
        n1 = (noise(x * rez1, y * rez1)-0.2)*1.7;
        ang = n1 * PI * 2;
        newX1 = cos(ang) * len + x;
        newY1 = sin(ang) * len + y;
        newX2 = g1.x + x;
        newY2 = g1.y + y;
        newX = newX1*0.43 + newX2*0.57;
        newY = newY1*0.43 + newY2*0.57;
        line(x, y, newX, newY);
        x = newX;
        y = newY;
      }
    }
  }
}

function distFunction(l, m, n) {
  distToCircle = dist(l, m, circles[n].x, circles[n].y);
  if (distToCircle > circles[n].z) {
    return 0;
  }
  return distToCircle;
}

function makeGradient(l, m, n, requestedFunction) {
  step = 5;
  center1 = requestedFunction(l, m, n);
  east = requestedFunction(l + step, m, n);
  south = requestedFunction(l, m + step, n);
  x2 = east - center1;
  y2 = south - center1;
  vec = createVector(y2, -x2);
  // vec = createVector(x2, y2);
  // vec.rotate(PI*0.5);
  return vec.normalize();
}


function keyTyped() {
  if (key === "s") {
    save("canvas.png");
  }
}
